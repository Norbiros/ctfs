from fpylll import IntegerMatrix, LLL, GSO, CVP

# Read data
with open("output.txt") as f:
    lines = f.read().strip().splitlines()

n = int(lines[0])
coeffs = list(map(int, lines[1][1:-1].split(", ")))
result = int(lines[-1])
N = len(coeffs)
B = 2 ** 16  # scaling factorfrom fpylll import IntegerMatrix, LLL, GSO, CVP
import sys


# Construct lattice basis
M = IntegerMatrix(N + 1, N + 1)
for i in range(N):
    M[i, i] = B
    M[i, N] = coeffs[i]
for i in range(N):
    M[N, i] = coeffs[i]
M[N, N] = -n

# Reduce
LLL.reduction(M)
gso = GSO.Mat(M)
gso.update_gso()

cvp = CVP(gso)

# Target vector: [0, 0, ..., 0, result]
target = [0] * N + [result]
closest = cvp.closest_vector(target)

# Extract and validate
x = closest[:N]
if all(0 <= xi <= 255 for xi in x):
    try:
        print("✅ Recovered flag:", bytes(x).decode())
    except Exception as e:
        print("❌ Decoding error:", e)
else:
    print("❌ Closest vector doesn't fit byte range.")
